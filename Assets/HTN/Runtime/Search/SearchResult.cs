using System.Collections;
using System;
using System.Collections.Generic;
using UFrame.BehaviourTree;

namespace UFrame.HTN
{
	/// <summary>
	/// Search result generated by the search algorithm.
	/// </summary>
	[Serializable]
	public class SearchResult
	{
		/// <summary>
		/// Handle used for async searches.
		/// </summary>
		public ulong handle;

		/// <summary>
		/// Cost of the found plan.
		/// </summary>
		public MethodTraversalRecord methodTraversalRecord;

		/// <summary>
		/// Plan of action nodes.
		/// </summary>
		public List<PlanNode> plan;

		/// <summary>
		/// 结束节点
		/// </summary>
		public List<string> lastPredecessors;
		/// <summary>
		/// Check if search was successful or not.
		/// </summary>
		public bool success;

		private Planner planner;
		/// <summary>
		/// Constructor.
		/// </summary>
		public SearchResult(Planner planner)
		{
			this.planner = planner;
			this.methodTraversalRecord = new MethodTraversalRecord();
			this.plan = new List<PlanNode>();
			this.lastPredecessors = new List<string>();
		}

		public void CopyTo(SearchResult result)
		{
			result.handle = handle;
			methodTraversalRecord.CopyTo(result.methodTraversalRecord);
			result.plan.Clear();
			result.plan.AddRange(plan);
			result.success = success;
			result.lastPredecessors.Clear();
			result.lastPredecessors.AddRange(lastPredecessors);
		}

		/// <summary>
		/// Combine search result with another.
		/// </summary>
		public List<PlanNode> Aggregate(SearchResult other, List<string> predecessors)
		{
			AppendPlans(other.plan, predecessors);
			methodTraversalRecord.AddRange(other.methodTraversalRecord.list);
			return plan;
		}

		/// <summary>
		/// 前置任务条件
		/// </summary>
		/// <param name="node"></param>
		/// <param name="lastNode"></param>
		public PlanNode AddToPlan(TaskInfo node, List<string> predecessors)
		{
			UnityEngine.Debug.Log("AddToPlan:" + node.node.name + ", AddPredecessors:" + predecessors.Count);
			var planNode = planner.GetPlanNode(node);
			planNode.AddPredecessors(predecessors);
			plan.Add(planNode);
			return planNode;
		}

		public void AppendPlans(List<PlanNode> nodes, List<string> predecessors)
		{
			foreach (var planNode in nodes)
			{
				UnityEngine.Debug.Log("AddToPlans:" + planNode.node.name + ", AddPredecessors:" + predecessors.Count);
				if (!planNode.HavePredecessor)
				{
					planNode.AddPredecessors(predecessors);
				}
				this.plan.Add(planNode);
			}
		}

		public string[] TraverseDepth(TaskInfo taskInfo, Search search, List<string> predecessors)
		{
			var node = taskInfo.node;
			if (node is IMethod method)
			{
				var searchResult = method.Search(taskInfo, search, predecessors);
				if (searchResult == null)
					return null;
				var success = searchResult.success;
				if (success)
				{
					Aggregate(searchResult, predecessors);
				}
				string[] nextPredecessors = null;
				if (searchResult.lastPredecessors.Count > 0)
					nextPredecessors = searchResult.lastPredecessors.ToArray();
				search.SaveBack(searchResult);
				return nextPredecessors;
			}
			return null;
		}
	}

	public delegate void SearchHandler(SearchResult result);
}
